{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DevLab"
		},
		"adlsWithKeyVault_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsgen2devlab.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/adlsWithKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('adlsWithKeyVault_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_DevlabKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "adls-key",
						"secretVersion": "15554c3af942466996fda40e3e9fe677"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyBlobToSqlTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_4vu",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "products1/sales_2019.csv/"
							},
							{
								"name": "Destination",
								"value": "SalesLT.sales"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_products",
									"type": "LinkedServiceReference"
								},
								"path": "products1"
							},
							"enableSkipIncompatibleRow": true,
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_products",
									"type": "LinkedServiceReference"
								},
								"path": "products1"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "p_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "p_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "c_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "c_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "no_of_units",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "no_of_units",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_4vu",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_4vu",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get Sales format",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SalesIngestion",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-08-11T05:15:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data Ingestion to Stg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Region Config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select directory_name, file_name, file_type, full_load from SalesLT.SalesIngestion where region_name = @{pipeline().parameters.Region}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "CustomerStg",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get File Location",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "dir_name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_region_dir",
								"type": "DatasetReference",
								"parameters": {
									"directory_name": {
										"value": "@variables('dir_name')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "dir_name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Region Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dir_name",
							"value": {
								"value": "@activity('Get Region Config').output.value[1].directory_name",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"Region": {
						"type": "string"
					}
				},
				"variables": {
					"dir_name": {
						"type": "String"
					},
					"region_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-12T09:52:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Sales Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_sales_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachSalesFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Sales Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Sales Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Sales",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sales_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sales_yearly",
											"type": "DatasetReference",
											"parameters": {
												"year": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-08-10T11:12:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DuplicateAlphabets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_alphabets",
								"type": "DatasetReference"
							},
							"name": "alphabets"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_distinct",
								"type": "DatasetReference"
							},
							"name": "Distincts"
						}
					],
					"transformations": [
						{
							"name": "GetCount"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> alphabets\nalphabets aggregate(groupBy(Column_1),\n\tCount = count(Column_1)) ~> GetCount\nGetCount sink(input(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmapColumn(\n\t\tColumn_1\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Distincts"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InsertSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesFiles_ds",
								"type": "DatasetReference"
							},
							"name": "SalesFile"
						},
						{
							"dataset": {
								"referenceName": "SalesTab",
								"type": "DatasetReference"
							},
							"name": "MaxSalesId"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SalesTab",
								"type": "DatasetReference"
							},
							"name": "SaveToSalesTable"
						}
					],
					"transformations": [
						{
							"name": "GetMaxSalesId"
						},
						{
							"name": "JoinWithMaxId"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tFilename as string ('sales_2019.csv')\n}\nsource(output(\n\t\tp_id as short,\n\t\tc_id as short,\n\t\tno_of_units as short,\n\t\tdate_purchased as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:[($Filename)]) ~> SalesFile\nsource(output(\n\t\tmaxId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select max(sales_id) as maxId from SalesLT.sales',\n\tformat: 'query') ~> MaxSalesId\nMaxSalesId derive(maxId = iif(isNull(maxId),0,maxId)) ~> GetMaxSalesId\nSalesFile, GetMaxSalesId join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinWithMaxId\nJoinWithMaxId keyGenerate(output(surrogate_id as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(sales_id = maxId + surrogate_id) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tp_id as integer,\n\t\tc_id as integer,\n\t\tno_of_units as integer,\n\t\tdate_purchased as timestamp,\n\t\tsales_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tp_id,\n\t\tc_id,\n\t\tno_of_units,\n\t\tdate_purchased,\n\t\tsales_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SaveToSalesTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadProducts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "products_ds",
								"type": "DatasetReference"
							},
							"name": "ProductCSV"
						},
						{
							"dataset": {
								"referenceName": "Products_tab",
								"type": "DatasetReference"
							},
							"name": "SelectProdIdentifier"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Products_tab",
								"type": "DatasetReference"
							},
							"name": "LoadProductsTab"
						}
					],
					"transformations": [
						{
							"name": "GetProdIdentifier"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tprod_identifier as integer,\n\t\tp_name as string,\n\t\tp_colour as string,\n\t\tp_price as decimal(10,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ProductCSV\nsource(output(\n\t\tprod_identifier as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select prod_identifier from [SalesLT].[products]',\n\tformat: 'query') ~> SelectProdIdentifier\nProductCSV, SelectProdIdentifier join(ProductCSV@prod_identifier == SelectProdIdentifier@prod_identifier,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> GetProdIdentifier\nGetProdIdentifier alterRow(upsertIf(ProductCSV@prod_identifier==SelectProdIdentifier@prod_identifier)) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tprod_identifier as integer,\n\t\tp_name as string,\n\t\tp_colour as string,\n\t\tp_price as decimal(18,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['prod_identifier'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tpostSQLs:['commit'],\n\tmapColumn(\n\t\tprod_identifier = ProductCSV@prod_identifier,\n\t\tp_name,\n\t\tp_colour,\n\t\tp_price\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LoadProductsTab"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Customer_Stage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						},
						{
							"dataset": {
								"referenceName": "CustomerStg",
								"type": "DatasetReference"
							},
							"name": "GetMaxId"
						},
						{
							"dataset": {
								"referenceName": "CustomerStg",
								"type": "DatasetReference"
							},
							"name": "CustomerStgTab"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerStg",
								"type": "DatasetReference"
							},
							"name": "UpdateCustomerStg"
						},
						{
							"dataset": {
								"referenceName": "CustomerStg",
								"type": "DatasetReference"
							},
							"name": "InsertCustomers"
						}
					],
					"transformations": [
						{
							"name": "SurrogateId"
						},
						{
							"name": "MaxValue"
						},
						{
							"name": "JoinWithIdStream"
						},
						{
							"name": "JoinWithCustomerStgTab"
						},
						{
							"name": "CheckCustomerIdentifie"
						},
						{
							"name": "Merge"
						},
						{
							"name": "DeriveValues"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "Primarykey"
						}
					],
					"script": "source(output(\n\t\tc_identifier as short,\n\t\tc_name as string,\n\t\tc_gender as string,\n\t\tc_phone_no as string,\n\t\tc_address as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Customer\nsource(output(\n\t\tmaxId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select max(id) as maxId from SalesLT.customer_stg',\n\tformat: 'query') ~> GetMaxId\nsource(output(\n\t\tcustomer_identifier as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select customer_identifier from SalesLT.customer_stg',\n\tformat: 'query') ~> CustomerStgTab\nSelectColumns keyGenerate(output(Sur_Id as long),\n\tstartAt: 1L) ~> SurrogateId\nGetMaxId derive(MaxId = iif(isNull(maxId),0,maxId)) ~> MaxValue\nJoinWithCustomerStgTab, MaxValue join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinWithIdStream\nDeriveValues, CustomerStgTab join(c_identifier == customer_identifier,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinWithCustomerStgTab\nJoinWithIdStream split(isNull(customer_identifier),\n\tnot(isNull(customer_identifier)),\n\tdisjoint: false) ~> CheckCustomerIdentifie@(Insert, Upsert)\nCheckCustomerIdentifie@Upsert alterRow(upsertIf(c_identifier==customer_identifier)) ~> Merge\nCustomer derive(first_name = split(c_name,' ')[1],\n\t\tlast_name = split(c_name, ' ')[2],\n\t\tgender = case(c_gender=='Male','M','F'),\n\t\tarea_code = toInteger(split(c_phone_no, '-')[1])) ~> DeriveValues\nCheckCustomerIdentifie@Insert select(mapColumn(\n\t\tc_identifier,\n\t\tc_name,\n\t\tc_gender,\n\t\tc_phone_no,\n\t\tc_address,\n\t\tfirst_name,\n\t\tlast_name,\n\t\tgender,\n\t\tarea_code,\n\t\tcustomer_identifier,\n\t\tMaxId = CheckCustomerIdentifie@Insert@MaxId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nSurrogateId derive(customer_pk = MaxId + Sur_Id) ~> Primarykey\nMerge sink(input(\n\t\tid as integer,\n\t\tcustomer_identifier as integer,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tgender as string,\n\t\tarea_code as integer,\n\t\tphone_no as string,\n\t\taddress_line1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['customer_identifier'],\n\tformat: 'table',\n\tmapColumn(\n\t\tcustomer_identifier = c_identifier,\n\t\tfirst_name,\n\t\tlast_name,\n\t\tgender,\n\t\tarea_code,\n\t\tphone_no = c_phone_no,\n\t\taddress_line1 = c_address\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UpdateCustomerStg\nPrimarykey sink(input(\n\t\tid as integer,\n\t\tcustomer_identifier as integer,\n\t\tfirst_name as string,\n\t\tlast_name as string,\n\t\tgender as string,\n\t\tarea_code as integer,\n\t\tphone_no as string,\n\t\taddress_line1 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tid = customer_pk,\n\t\tcustomer_identifier = c_identifier,\n\t\tfirst_name,\n\t\tlast_name,\n\t\tgender,\n\t\tarea_code,\n\t\tphone_no = c_phone_no,\n\t\taddress_line1 = c_address\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InsertCustomers"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Customer_Stage",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customer": {},
									"GetMaxId": {},
									"CustomerStgTab": {},
									"UpdateCustomerStg": {},
									"InsertCustomers": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-08-11T12:34:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Load_Customer_Stage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSalesFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Sales_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetSalesFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSalesFiles').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(startswith(item().name,'sales'),endswith(item().name,'.csv')),equals(item().type,'File'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachSalesFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "InsertSales",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "InsertSales",
											"type": "DataFlowReference",
											"parameters": {
												"Filename": {
													"value": "'@{item().name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SalesFile": {},
												"MaxSalesId": {},
												"SaveToSalesTable": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/InsertSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductDF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadProducts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadProducts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductCSV": {},
									"SelectProdIdentifier": {},
									"LoadProductsTab": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadProducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadCustomerStg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Load Customer Stg",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Customer_DF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "store etl logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Load Customer Stg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[SalesLT].[p_etl_logs]",
							"storedProcedureParameters": {
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_triggerid": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_triggername": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_triggertime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipeline_triggertype": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzSQLDBdevLab",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-08-12T04:55:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Customer_DF')]"
			]
		}
	]
}